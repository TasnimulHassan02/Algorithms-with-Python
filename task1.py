# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uKAR5rDOT9wyg_X0Da79nS9gmMfwKwr_
"""

from google.colab import drive
drive.mount('/content/drive')

task1_input = open(file = '/content/drive/MyDrive/CSE221/Lab 08/input1.txt', mode = 'r')

task1_output = open(file = '/content/drive/MyDrive/CSE221/Lab 08/output1.txt', mode = 'w')

c, r = task1_input.readline().strip().split()
c, r = int(c), int(r)
graph = []
for i in range(r):
  u, v, w = task1_input.readline().strip().split()
  u, v, w = int(u), int(v), int(w)
  graph.append((u, v, w))

def find(par, n):
    if par[n] == -1:
        return n
    else:
      return find(par, par[n])
def union(par, size, x, y):
    x_par = find(par, x)
    y_par = find(par, y)
    if x_par != y_par:
        if size[x_par] < size[y_par]:
            par[x_par] = y_par
            size[y_par] += size[x_par]
        else:
            par[y_par] = x_par
            size[x_par] += size[y_par]
def min_total_cost(graph, v):
    graph.sort(key=lambda x: x[2])
    par = [-1] * (v + 1)
    size = [1] * (v + 1)
    min_cost = 0
    for u, v, w in graph:
        if find(par, u) != find(par, v):
            min_cost += w
            union(par, size, u, v)
    return min_cost

ans = min_total_cost(graph, c)
task1_output.write(str(ans))

task1_input.close()
task1_output.close()
# -*- coding: utf-8 -*-
"""Task1B.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KjmiZBaV3xPLEhQTBVm5kqW-HzSfhWvc
"""

from google.colab import drive
drive.mount('/content/drive')

task1b_input = open(file='/content/drive/MyDrive/CSE221/Lab 05/input1b.txt', mode='r')

task1b_output = open(file='/content/drive/MyDrive/CSE221/Lab 05/output1b.txt', mode='w')

from collections import defaultdict, deque

def bfs(graph, in_deg, V):
    queue = deque()
    result = []
    for i in range(1, V + 1):
        if in_deg[i] == 0:
            queue.append(i)
    while queue:
        c = queue.popleft()
        result.append(c)
        for u in graph[c]:
            in_deg[u] -= 1
            if in_deg[u] == 0:
                queue.append(u)
    return result

def bfs_topological_order(V, graph):
    in_deg = [0] * (V + 1)
    for c in graph:
        for u in graph[c]:
            in_deg[u] += 1
    order = bfs(graph, in_deg, V)
    return order

lst = task1b_input.readline().strip().split(" ")
v = int(lst[0])
e = int(lst[1])
adj_list = {}
for i in range(1, v+1):
    adj_list[i] = []
for i in range(e):
    lst2 = task1b_input.readline().strip().split()
    u = int(lst2[0])
    v = int(lst2[1])
    adj_list[u].append(v)

ans = bfs_topological_order(v, adj_list)
if len(ans) == v:
    task1b_output.write(str(ans))
else:
    task1b_output.write("IMPOSSIBLE")

task1b_input.close()
task1b_output.close()